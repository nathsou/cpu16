
pub module RegisterFile (
    i_clk: input clock,
    i_rst: input reset,
    i_count_enable: input logic,
    i_write_enable: input logic,
    i_write_dest: input logic<3>,
    i_write_data: input logic<16>,
    i_read_src1: input logic<3>,
    i_read_src2: input logic<3>,
    o_read_data1: output logic<16>,
    o_read_data2: output logic<16>,
    o_program_counter: output logic<16>,
    o_display_reg: output logic<32>,
) {
    var r_regs: logic<16>[8];
    local RESET_PC: logic<16> = 16'h8000;

    always_ff (i_clk) {
        if i_rst {
            r_regs[0] = '0;
            r_regs[1] = '0;
            r_regs[2] = '0;
            r_regs[3] = '0;
            r_regs[4] = '0;
            r_regs[5] = '0;
            r_regs[6] = '0;
            r_regs[7] = RESET_PC;
        } else {
            if i_count_enable && !(i_write_enable && i_write_dest == 3'd7) {
                r_regs[7] = r_regs[7] + 1;
            }
            
            if i_write_enable && i_write_dest != 3'b000 {
                r_regs[i_write_dest] = i_write_data;
            }
        }
    }

    assign o_read_data1 = r_regs[i_read_src1];
    assign o_read_data2 = r_regs[i_read_src2];
    assign o_program_counter = r_regs[7];
    assign o_display_reg = {r_regs[1], r_regs[2]};
}
